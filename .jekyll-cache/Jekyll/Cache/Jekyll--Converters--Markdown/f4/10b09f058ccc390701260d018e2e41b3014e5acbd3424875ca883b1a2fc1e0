I"¶'<h1 id="introduction">Introduction</h1>

<p>The base R system provides <code class="language-plaintext highlighter-rouge">lapply()</code> and related functions, and the package <code class="language-plaintext highlighter-rouge">plyr</code> provides alternatives that are worth considering.  It will be assumed that readers are familiar with <code class="language-plaintext highlighter-rouge">lapply()</code> and are willing to spend a few moments reading the <code class="language-plaintext highlighter-rouge">plyr</code> documentation, to see why the illustration here will use the <code class="language-plaintext highlighter-rouge">ldply()</code> function.</p>

<p>The test task will be extraction of latitude (and then both latitude and longitude) from the <code class="language-plaintext highlighter-rouge">section</code> dataset in the <code class="language-plaintext highlighter-rouge">oce</code> package.  (Users of that package may be aware that there is a built-in accessor for doing this, so results can easily be checked.)</p>

<h1 id="methods">Methods</h1>

<p>First, load the data</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="n">library</span><span class="p">(</span><span class="n">oce</span><span class="p">)</span><span class="w">
</span><span class="n">data</span><span class="p">(</span><span class="n">section</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Next, find latitudes using <code class="language-plaintext highlighter-rouge">lapply</code></p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="n">lat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">unlist</span><span class="p">(</span><span class="n">lapply</span><span class="p">(</span><span class="n">section</span><span class="p">[[</span><span class="s2">"station"</span><span class="p">]],</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="n">x</span><span class="p">[[</span><span class="s2">"latitude"</span><span class="p">]]))</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Next, find latitudes with <code class="language-plaintext highlighter-rouge">ldply</code></p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="n">library</span><span class="p">(</span><span class="n">plyr</span><span class="p">)</span><span class="w">
</span><span class="n">lat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ldply</span><span class="p">(</span><span class="n">section</span><span class="p">[[</span><span class="s2">"station"</span><span class="p">]],</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="n">x</span><span class="p">[[</span><span class="s2">"latitude"</span><span class="p">]])</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h1 id="results">Results</h1>

<p>The reader can check that the results match, although <code class="language-plaintext highlighter-rouge">ldply()</code> returns a data frame, not a vector as in the first method.  Tests of speed</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="n">library</span><span class="p">(</span><span class="n">microbenchmark</span><span class="p">)</span><span class="w">
</span><span class="n">microbenchmark</span><span class="p">(</span><span class="n">ldply</span><span class="p">(</span><span class="n">section</span><span class="p">[[</span><span class="s2">"station"</span><span class="p">]],</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="n">x</span><span class="p">[[</span><span class="s2">"latitude"</span><span class="p">]])</span><span class="o">$</span><span class="n">V1</span><span class="p">,</span><span class="w"> 
    </span><span class="n">unlist</span><span class="p">(</span><span class="n">lapply</span><span class="p">(</span><span class="n">section</span><span class="p">[[</span><span class="s2">"station"</span><span class="p">]],</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="n">x</span><span class="p">[[</span><span class="s2">"latitude"</span><span class="p">]])))</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>yield the following</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="c1">## Unit: milliseconds</span><span class="w">
</span><span class="c1">##                                                               expr   min</span><span class="w">
</span><span class="c1">##        ldply(section[["station"]], function(x) x[["latitude"]])$V1 18.99</span><span class="w">
</span><span class="c1">##  unlist(lapply(section[["station"]], function(x) x[["latitude"]])) 18.36</span><span class="w">
</span><span class="c1">##     lq median    uq   max neval</span><span class="w">
</span><span class="c1">##  20.26  20.56 21.02 36.05   100</span><span class="w">
</span><span class="c1">##  19.71  19.93 20.64 63.18   100</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>suggesting a difference too small to be of much practical interest.</p>

<h1 id="discussion">Discussion</h1>

<p>Since <code class="language-plaintext highlighter-rouge">ldply()</code> returns a data frame, it is more flexible than <code class="language-plaintext highlighter-rouge">unlist()</code>, which returns a vector.  For example, the following creates a data frame with columns for lat and lon:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="n">latlon</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ldply</span><span class="p">(</span><span class="n">section</span><span class="p">[[</span><span class="s2">"station"</span><span class="p">]],</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">x</span><span class="p">[[</span><span class="s2">"latitude"</span><span class="p">]],</span><span class="w"> </span><span class="n">x</span><span class="p">[[</span><span class="s2">"longitude"</span><span class="p">]]))</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>A station plot is produced as follows.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="n">mapPlot</span><span class="p">(</span><span class="n">coastlineWorld</span><span class="p">,</span><span class="w"> </span><span class="n">projection</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"orthographic"</span><span class="p">,</span><span class="w"> </span><span class="n">orientation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">20</span><span class="p">,</span><span class="w"> </span><span class="m">-40</span><span class="p">,</span><span class="w"> 
    </span><span class="m">0</span><span class="p">))</span><span class="w">
</span><span class="n">mapPoints</span><span class="p">(</span><span class="n">latlon</span><span class="o">$</span><span class="n">V2</span><span class="p">,</span><span class="w"> </span><span class="n">latlon</span><span class="o">$</span><span class="n">V1</span><span class="p">,</span><span class="w"> </span><span class="n">pch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"+"</span><span class="p">,</span><span class="w"> </span><span class="n">cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="o">/</span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"red"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><img src="/assets/plyr.png" alt="figure" /></p>

<h1 id="conclusions">Conclusions</h1>

<p>The effort of learning how to use the <code class="language-plaintext highlighter-rouge">plyr</code> package is likely to pay off in more flexible code, particularly because of the use of data frames in that package.  On this theme, note that the author of <code class="language-plaintext highlighter-rouge">plyr</code> is developing a similar package called <code class="language-plaintext highlighter-rouge">dplry</code>, which centres more closely on data frames and offers many new features; see <a href="http://blog.rstudio.org/2014/01/17/introducing-dplyr/">http://blog.rstudio.org/2014/01/17/introducing-dplyr/</a> for a blog item introducing <code class="language-plaintext highlighter-rouge">dplyr</code>.</p>
:ET