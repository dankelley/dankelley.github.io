I"yB<h1 id="introduction">Introduction</h1>

<p>Over the past month or so I have been trying different ways of handling GMT-style colormaps in Oce.  I think my present solution is on the right track, but I am posting here to get more eyes on the problem.</p>

<p>Note that, prior to 2014-04, there were different versions for <code class="language-plaintext highlighter-rouge">colormap()</code>.</p>

<h1 id="procedure">Procedure</h1>

<p>The following code is direct from the help for <code class="language-plaintext highlighter-rouge">Colormap()</code>; all Iâ€™ve done is to put the example code into Rmarkdown to make for easier comparison with the resultant graphs.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="n">library</span><span class="p">(</span><span class="n">oce</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Loading required package: methods
## Loading required package: mapproj
## Loading required package: maps</code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="c1">## Example 1. color scheme for points on xy plot</span><span class="w">
</span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">seq</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">length.out</span><span class="o">=</span><span class="m">40</span><span class="p">)</span><span class="w">
</span><span class="n">y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">sin</span><span class="p">(</span><span class="m">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nb">pi</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">x</span><span class="p">)</span><span class="w">
</span><span class="n">par</span><span class="p">(</span><span class="n">mar</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">3</span><span class="p">,</span><span class="w"> </span><span class="m">3</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">))</span><span class="w">
</span><span class="n">mar</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">par</span><span class="p">(</span><span class="s1">'mar'</span><span class="p">)</span><span class="w"> </span><span class="c1"># prevent margin creep by drawPalette()</span><span class="w">
</span><span class="c1">## First, default breaks</span><span class="w">
</span><span class="n">c</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colormap</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w">
</span><span class="n">drawPalette</span><span class="p">(</span><span class="n">c</span><span class="o">$</span><span class="n">zlim</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="n">c</span><span class="o">$</span><span class="n">col</span><span class="p">,</span><span class="w"> </span><span class="n">breaks</span><span class="o">=</span><span class="n">c</span><span class="o">$</span><span class="n">breaks</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">bg</span><span class="o">=</span><span class="n">c</span><span class="o">$</span><span class="n">zcol</span><span class="p">,</span><span class="w"> </span><span class="n">pch</span><span class="o">=</span><span class="m">21</span><span class="p">,</span><span class="w"> </span><span class="n">cex</span><span class="o">=</span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="n">grid</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><img src="http://dankelley.github.io/figs/2014-04-30-colormap/unnamed-chunk-11.png" alt="center" /></p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="n">par</span><span class="p">(</span><span class="n">mar</span><span class="o">=</span><span class="n">mar</span><span class="p">)</span><span class="w">
</span><span class="c1">## Second, 100 breaks, yielding a smoother palette</span><span class="w">
</span><span class="n">c</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colormap</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">breaks</span><span class="o">=</span><span class="m">100</span><span class="p">)</span><span class="w">
</span><span class="n">drawPalette</span><span class="p">(</span><span class="n">c</span><span class="o">$</span><span class="n">zlim</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="n">c</span><span class="o">$</span><span class="n">col</span><span class="p">,</span><span class="w"> </span><span class="n">breaks</span><span class="o">=</span><span class="n">c</span><span class="o">$</span><span class="n">breaks</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">bg</span><span class="o">=</span><span class="n">c</span><span class="o">$</span><span class="n">zcol</span><span class="p">,</span><span class="w"> </span><span class="n">pch</span><span class="o">=</span><span class="m">21</span><span class="p">,</span><span class="w"> </span><span class="n">cex</span><span class="o">=</span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="n">grid</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><img src="http://dankelley.github.io/figs/2014-04-30-colormap/unnamed-chunk-12.png" alt="center" /></p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="n">par</span><span class="p">(</span><span class="n">mar</span><span class="o">=</span><span class="n">mar</span><span class="p">)</span><span class="w">

</span><span class="c1">## Example 2. topographic image with a standard color scheme</span><span class="w">
</span><span class="n">par</span><span class="p">(</span><span class="n">mfrow</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">))</span><span class="w">
</span><span class="n">data</span><span class="p">(</span><span class="n">topoWorld</span><span class="p">)</span><span class="w">
</span><span class="n">cm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colormap</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">"gmt_globe"</span><span class="p">)</span><span class="w">
</span><span class="n">imagep</span><span class="p">(</span><span class="n">topoWorld</span><span class="p">,</span><span class="w"> </span><span class="n">breaks</span><span class="o">=</span><span class="n">cm</span><span class="o">$</span><span class="n">breaks</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="n">cm</span><span class="o">$</span><span class="n">col</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><img src="http://dankelley.github.io/figs/2014-04-30-colormap/unnamed-chunk-13.png" alt="center" /></p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="c1">## Example 3. topographic image with modified colors</span><span class="w">
</span><span class="n">cm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colormap</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">"gmt_globe"</span><span class="p">)</span><span class="w">
</span><span class="n">deep</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cm</span><span class="o">$</span><span class="n">x0</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="m">-4000</span><span class="w">
</span><span class="n">cm</span><span class="o">$</span><span class="n">col0</span><span class="p">[</span><span class="n">deep</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s1">'black'</span><span class="w">
</span><span class="n">cm</span><span class="o">$</span><span class="n">col1</span><span class="p">[</span><span class="n">deep</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s1">'black'</span><span class="w">
</span><span class="n">cm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colormap</span><span class="p">(</span><span class="n">x0</span><span class="o">=</span><span class="n">cm</span><span class="o">$</span><span class="n">x0</span><span class="p">,</span><span class="w"> </span><span class="n">x1</span><span class="o">=</span><span class="n">cm</span><span class="o">$</span><span class="n">x1</span><span class="p">,</span><span class="w"> </span><span class="n">col0</span><span class="o">=</span><span class="n">cm</span><span class="o">$</span><span class="n">col0</span><span class="p">,</span><span class="w"> </span><span class="n">col1</span><span class="o">=</span><span class="n">cm</span><span class="o">$</span><span class="n">col1</span><span class="p">)</span><span class="w">
</span><span class="n">imagep</span><span class="p">(</span><span class="n">topoWorld</span><span class="p">,</span><span class="w"> </span><span class="n">breaks</span><span class="o">=</span><span class="n">cm</span><span class="o">$</span><span class="n">breaks</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="n">cm</span><span class="o">$</span><span class="n">col</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><img src="http://dankelley.github.io/figs/2014-04-30-colormap/unnamed-chunk-14.png" alt="center" /></p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="c1">## Example 4. image of world topography with water colorized </span><span class="w">
</span><span class="c1">##            smoothly from violet at 8km depth to blue</span><span class="w">
</span><span class="c1">##            at 4km depth, then blending in 0.5km increments</span><span class="w">
</span><span class="c1">##            to white at the coast, with tan for land.</span><span class="w">
</span><span class="n">cm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colormap</span><span class="p">(</span><span class="n">x0</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">-8000</span><span class="p">,</span><span class="w"> </span><span class="m">-4000</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">100</span><span class="p">),</span><span class="w">
               </span><span class="n">x1</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">-8000</span><span class="p">,</span><span class="w"> </span><span class="m">-4000</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">100</span><span class="p">),</span><span class="w">
               </span><span class="n">col0</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"violet"</span><span class="p">,</span><span class="s2">"blue"</span><span class="p">,</span><span class="s2">"white"</span><span class="p">,</span><span class="s2">"tan"</span><span class="p">),</span><span class="w">
               </span><span class="n">col1</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"violet"</span><span class="p">,</span><span class="s2">"blue"</span><span class="p">,</span><span class="s2">"white"</span><span class="p">,</span><span class="s2">"tan"</span><span class="p">),</span><span class="w">
               </span><span class="n">n</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="m">8</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">))</span>
</pre></td></tr></tbody></table></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Warning: the condition has length &gt; 1 and only the first element will be
## used</code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Error: 'con' is not a connection</code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="n">lon</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">topoWorld</span><span class="p">[[</span><span class="s1">'longitude'</span><span class="p">]]</span><span class="w">
</span><span class="n">lat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">topoWorld</span><span class="p">[[</span><span class="s1">'latitude'</span><span class="p">]]</span><span class="w">
</span><span class="n">z</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">topoWorld</span><span class="p">[[</span><span class="s1">'z'</span><span class="p">]]</span><span class="w">
</span><span class="n">imagep</span><span class="p">(</span><span class="n">lon</span><span class="p">,</span><span class="w"> </span><span class="n">lat</span><span class="p">,</span><span class="w"> </span><span class="n">z</span><span class="p">,</span><span class="w"> </span><span class="n">breaks</span><span class="o">=</span><span class="n">cm</span><span class="o">$</span><span class="n">breaks</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="n">cm</span><span class="o">$</span><span class="n">col</span><span class="p">)</span><span class="w">
</span><span class="n">contour</span><span class="p">(</span><span class="n">lon</span><span class="p">,</span><span class="w"> </span><span class="n">lat</span><span class="p">,</span><span class="w"> </span><span class="n">z</span><span class="p">,</span><span class="w"> </span><span class="n">levels</span><span class="o">=</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">add</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><img src="http://dankelley.github.io/figs/2014-04-30-colormap/unnamed-chunk-15.png" alt="center" /></p>

<h1 id="resources">Resources</h1>

<ul>
  <li>Source code: <a href="/assets/2014-04-30-colormap.R">2014-04-30-colormap.R</a></li>
</ul>
:ET