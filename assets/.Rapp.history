ylim <- par("usr")[3:4]
} else {
mapPlot(coastlineWorld, projection=p, xlim=xlim, ylim=ylim, xaxs="i", yaxs="i")
}
lons <- seq(360, 0, -7.5)
ilon <- seq_along(lons)
par(mar=rep(1, 4))
for (i in ilon) {
p <- paste('+proj=ortho +lat_0=30 +lon_0=', lons[i], sep='')
if (i == 1) {
mapPlot(coastlineWorld, projection=p)
xlim <- par("usr")[1:2]
ylim <- par("usr")[3:4]
} else {
mapPlot(coastlineWorld, projection=p, xlim=xlim, ylim=ylim, xaxs="i", yaxs="i")
}
mapPlot(coastlineWorld, projection=p, col='darkbrown')
mapPlot(coastlineWorld, projection=p, col='brown')
mapPlot(coastlineWorld, projection=p, col='brown', lwd=2)
mapPlot(coastlineWorld, projection=p, col='brown', lwd=1.4)
mapPlot(coastlineWorld, projection=p, col='blue', lwd=1.4)
par(mar=rep(1, 4))#
for (i in ilon) {#
    p <- paste('+proj=ortho +lat_0=30 +lon_0=', lons[i], sep='')#
    if (i == 1) {#
        mapPlot(coastlineWorld, projection=p, col='blue', lwd=1.4)#
        xlim <- par("usr")[1:2]#
        ylim <- par("usr")[3:4]#
    } else {#
        mapPlot(coastlineWorld, projection=p, col='blue, lwd=1.4,#
                xlim=xlim, ylim=ylim, xaxs="i", yaxs="i")#
    }#
}
}
'
"
}
''
"
par(mar=rep(0, 4))
for (i in ilon) {
p <- paste("+proj=ortho +lat_0=30 +lon_0=", lons[i], sep="")
if (i == 1) {
mapPlot(coastlineWorld, projection=p, col="blue", lwd=1.4)
xlim <- par("usr")[1:2]
ylim <- par("usr")[3:4]
} else {
mapPlot(coastlineWorld, projection=p, col='blue, lwd=1.4,
xlim=xlim, ylim=ylim, xaxs="i", yaxs="i")
}
"
''
'
lons <- seq(360, 0, -7.5)
ilon <- seq_along(lons)
par(mar=rep(0, 4))
for (i in ilon) {
p <- paste("+proj=ortho +lat_0=30 +lon_0=", lons[i], sep="")
if (i == 1) {
mapPlot(coastlineWorld, projection=p, col="blue", lwd=1.4)
xlim <- par("usr")[1:2]
ylim <- par("usr")[3:4]
} else {
mapPlot(coastlineWorld, projection=p, col="blue", lwd=1.4,
xlim=xlim, ylim=ylim, xaxs="i", yaxs="i")
}
lons <- seq(360, 0, -15)#
ilon <- seq_along(lons)#
par(mar=rep(0, 4))#
for (i in ilon) {#
    p <- paste("+proj=ortho +lat_0=30 +lon_0=", lons[i], sep="")#
    if (i == 1) {#
        mapPlot(coastlineWorld, projection=p, col="blue", lwd=1.4)#
        xlim <- par("usr")[1:2]#
        ylim <- par("usr")[3:4]#
    } else {#
        mapPlot(coastlineWorld, projection=p, col="blue", lwd=1.4,#
                xlim=xlim, ylim=ylim, xaxs="i", yaxs="i")#
    }#
}
par(mfrow=c(2,1), mar=c(2, 2, 1, 1))
options(oceProj4Test=FALSE)
mapPlot(coastlineWorld, proj="+proj=moll")
mtext("using proj4 package")
options(oceProj4Test=TRUE)
mapPlot(coastlineWorld, proj="+proj=moll")
mtext("using internal proj4-style calculations")
q()
base::source("/tmp/r-plugin-kelley/Rsource-8837-DK-02.R", echo=TRUE)
q()
base::source("/tmp/r-plugin-kelley/Rsource-49344-20141110.R", echo=TRUE)
q()
help(optim)
library(oce)
help(sunAngle)
base::source("/tmp/r-plugin-kelley/Rsource-55615-sunrise.R", echo=TRUE)
set.Seed(20141110)
help(set.seed)
base::source("/tmp/r-plugin-kelley/Rsource-55615-sunrise.R", echo=TRUE)
points(-63.571, 44.649, pch=22, cex=2, bg='yellow')
base::source("/tmp/r-plugin-kelley/Rsource-55615-sunrise.R", echo=TRUE)
legend("bottomright", pch=c(21, 21, 22),
bg=c("pink", "red", "yellow"),
legend=c("Best", "Cloud", "True"))
legend("bottomright", pch=c(21, 21, 22),
pt.bg=c("pink", "red", "yellow"),
legend=c("Best", "Cloud", "True"))
base::source("/tmp/r-plugin-kelley/Rsource-55615-sunrise.R", echo=TRUE)
grid()
base::source("/tmp/r-plugin-kelley/Rsource-55615-sunrise.R", echo=TRUE)
setwd("/Users/kelley/dankelley.github.io")
q()
library(oce)
misfit <- function(lonlat)
{
riseAlt <- sunAngle(rise, longitude=lonlat[1], latitude=lonlat[2], useRefraction=TRUE)$altitude
setAlt <- sunAngle(set, longitude=lonlat[1], latitude=lonlat[2], useRefraction=TRUE)$altitude
0.5 * (abs(riseAlt) + abs(setAlt))
}
start <- c(-50, 50) # set this vaguely near the expected location
rise <- as.POSIXct("2014-11-11 11:06:00", tz="UTC")
set <- as.POSIXct("2014-11-11 20:51:00", tz="UTC")
bestfit <- optim(start, misfit)
data(coastlineWorldFine, package="ocedata")
plot(coastlineWorldFine, clon=-64, clat=45, span=500)
grid()
n <- 25
rises <- rise + rnorm(n, sd=30)
sets <- set + rnorm(n, sd=30)
set.seed(20141111) # this lets readers reproduce this exactly
for (i in 1:n) {
rise <- rises[i]
set <- sets[i]
fit <- optim(start, misfit)
points(fit$par[1], fit$par[2], pch=21, bg="pink", cex=1.4)
}
points(bestfit$par[1], bestfit$par[2], pch=21, cex=2, bg="red")
points(-63.571, 44.649, pch=22, cex=2, bg='yellow')
legend("bottomright", bg="white",
pch=c(21, 21, 22), pt.bg=c("pink", "red", "yellow"),
legend=c("Best", "Cloud", "True"))
q()
base::source("/tmp/r-plugin-kelley/Rsource-1098-2014-11-10-solar-navigation-2.R", echo=TRUE)
library(oce)#
misfit <- function(lonlat)#
{#
    riseAlt <- sunAngle(rise, longitude=lonlat[1], latitude=lonlat[2], useRefraction=TRUE)$altitude#
    setAlt <- sunAngle(set, longitude=lonlat[1], latitude=lonlat[2], useRefraction=TRUE)$altitude#
    0.5 * (abs(riseAlt) + abs(setAlt))#
}
start <- c(-50, 50) # set this vaguely near the expected location#
rise <- as.POSIXct("2014-11-11 11:06:00", tz="UTC")#
set <- as.POSIXct("2014-11-11 20:51:00", tz="UTC")#
bestfit <- optim(start, misfit)
data(coastlineWorldFine, package="ocedata")#
plot(coastlineWorldFine, clon=-64, clat=45, span=500)#
grid()#
#
n <- 25                                # use 25 perturbations#
rises <- rise + rnorm(n, sd=30)#
sets <- set + rnorm(n, sd=30)#
set.seed(20141111) # this lets readers reproduce this exactly#
for (i in 1:n) {#
    rise <- rises[i]#
    set <- sets[i]#
    fit <- optim(start, misfit)#
    points(fit$par[1], fit$par[2], pch=21, bg="pink", cex=1.4)#
}#
# Show the unperturbed fit#
points(bestfit$par[1], bestfit$par[2], pch=21, cex=2, bg="red")#
# Show the actual location of Halifax#
points(-63.571, 44.649, pch=22, cex=2, bg='yellow')#
# A legend summarizes all this work#
legend("bottomright", bg="white", #
       pch=c(21, 21, 22), pt.bg=c("red", "pink", "yellow"),#
       legend=c("Best", "Range", "True"))
q()
plot(8/(x^2+4))
plot(function(x)8/(x^2+4))
plot(function(x)8/(x^2+4),0,100)
plot(function(x)8/(x^2+4),-100,100)
plot(function(x)8/(x^2+4),-10,10)
plot(function(x)8/(x^2+4))
q()
library(oce)
load('Hw.rda')
setwd('assets/')
load('Hw.rda')
plot(Hw,band='kelley')
Hw
summary(Hw)
Hw<-landsatTrim(read.landsat(file = "/data/archive/landsat/LC80080292014065LGN00", ll=list(longitude=-63.605129, latitude=44.605000), ur=list(longitude=-63.534871, latitude=44.655000))
)
Hw<-landsatTrim(read.landsat(file = "/data/archive/landsat/LC80080292014065LGN00"), ll=list(longitude=-63.605129, latitude=44.605000), ur=list(longitude=-63.534871, latitude=44.655000))
plot(Hw,band='kelley')
plot(Hw,band='kelley',red.f=2,green.f=2,blue.f=2)
plot(Hw,band='kelley',red.f=2,green.f=2,blue.f=2,offset=c(0,.1,0,0))
plot(Hw,band='kelley',red.f=2,green.f=2,blue.f=5)
plot(Hw,band='kelley',red.f=2,green.f=2.1,blue.f=2)
plot(Hw,band='kelley',red.f=2,green.f=2.1,blue.f=2,offset=rep(0.2,4))
plot(Hw,band='kelley',red.f=2,green.f=2.1,blue.f=2,offset=rep(0.1,4))
plot(Hw,band='kelley',red.f=2,green.f=2.1,blue.f=2,offset=c(0,-0.1,0,0)
)
plot(Hw,band='kelley',red.f=2,green.f=2.1,blue.f=2,offset=c(0,0.1,0,0))
plot(Hw,band='kelley',red.f=2,green.f=2.1,blue.f=2,offset=c(0,0.05,0,0))
plot(Hw,band='kelley',red.f=2,green.f=2.1,blue.f=3)
plot(Hw,band='kelley',red.f=3,green.f=2.1,blue.f=3)
plot(Hw,band='kelley',red.f=3,green.f=3,blue.f=3)
plot(Hw,band='kelley',red.f=3,green.f=3,blue.f=3,offset=c(0,.01,0,0))
plot(Hw,band='kelley',red.f=3,green.f=3,blue.f=3,offset=c(0,.05,0,0))
plot(Hw,band='kelley',red.f=3,green.f=3,blue.f=3,offset=c(0,-.05,0,0))
plot(Hw,band='kelley',red.f=3,green.f=3.5,blue.f=3,offset=c(0,-.05,0,0))
plot(Hw,band='kelley',red.f=3,green.f=4,blue.f=3,offset=c(0,-.05,0,0))
plot(Hw,band='kelley',red.f=3,green.f=4,blue.f=3,offset=c(0,-.1,0,0))
plot(Hw,band='kelley',red.f=3,green.f=4,blue.f=3,offset=c(0,-.2,0,0))
q()
source("election2016.R")
votes$state
abbrev <- list("Alabama"="AL")
abbrev(votes$state[1])
abbrev[votes$state[1]]
abbrev[][votes$state[1]]]
abbrev[[votes$state[1]]]
abbrev[[votes$state]]
source("election2016.R")
match(vote$state,abbrev)
match(votes$state,abbrev)
match(votes$state[1],abbrev)
abbrev
abbrev[votes$state[1]]
abbrev[votes$state]
lapply(votes$state, function(s) abbrev[s])
lapply(votes$state, function(s) abbrev[[s]])
lapply(votes$state, function(s) abbrev[[s]])
lapply(votes$state, function(s) print(s))
lapply(votes$state[1], function(s) abbrev[[s]])
lapply(votes$state[2], function(s) abbrev[[s]])
votes$state[2]
head(abbrev)
abbrev
source("election2016new.R")
lapply(votes$state[2], function(s) abbrev[[s]])
lapply(votes$state, function(s) abbrev[[s]])
unlist(lapply(votes$state, function(s) abbrev[[s]]))
a<-unlist(lapply(votes$state, function(s) abbrev[[s]]))
source("election2016new.R")
length(abbrev)
dan <- unlist(lapply(votes$state, function(s) abbrev[[s]]))
length(dan)
dim(votes)
abbrev
length(abbrev)
dim(votes)
source("election2016new.R")
dan
length(dan)
dim(votes)
length(abbrev)
source("election2016new.R")
text(education$advanced, votes$index, votes$abbrev)
source("election2016new.R")
source("election2016new.R")
source("election2016new.R")
source("election2016new.R")
source("election2016new.R")
index <- function(DR) (DR-1) / (DR + 1)
index(1.0)
index(10.0)
index(1.1)
index(1.5)
index <- function(percent) {#
    DR <- 1 + percent/100#
    (DR-1) / (DR + 1)#
}
index(0)
index(10)
index(100)
index(300)
index(seq(-200,200,50))
index(seq(0,200,50))
source("election2016new.R")
source("election2016new.R")
source("election2016new.R")
source("election2016new.R")
source("election2016new.R")
quartz()
source("election2016new.R")
source("election2016new.R")
source("election2016new.R")
subset(votes, state="Wyoming")
subset(votes, state=="Wyoming")
70.1/22.5
source("election2016new.R")
e
rm(list=ls())
source("election2016new.R")
source("election2016new.R")
source("election2016new.R")
source("election2016new.R")
source("election2016new.R")
source("election2016new.R")
source("election2016new.R")
source("election2016new.R")
lower("A")
tolower("A")
tolower("A")
source("election2016new.R")
